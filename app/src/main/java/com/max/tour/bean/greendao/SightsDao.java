package com.max.tour.bean.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.max.tour.bean.Sights;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SIGHTS".
*/
public class SightsDao extends AbstractDao<Sights, Long> {

    public static final String TABLENAME = "SIGHTS";

    /**
     * Properties of entity Sights.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property ResortId = new Property(2, String.class, "resortId", false, "RESORT_ID");
        public final static Property ResortName = new Property(3, String.class, "resortName", false, "RESORT_NAME");
        public final static Property ResortAddress = new Property(4, String.class, "resortAddress", false, "RESORT_ADDRESS");
        public final static Property ResortGrade = new Property(5, String.class, "resortGrade", false, "RESORT_GRADE");
        public final static Property ResortPrice = new Property(6, Integer.class, "resortPrice", false, "RESORT_PRICE");
        public final static Property ResortTime = new Property(7, String.class, "resortTime", false, "RESORT_TIME");
        public final static Property ResortContent = new Property(8, String.class, "resortContent", false, "RESORT_CONTENT");
        public final static Property Longitude = new Property(9, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(10, Double.class, "latitude", false, "LATITUDE");
    }

    private DaoSession daoSession;

    private Query<Sights> user_SightsQuery;

    public SightsDao(DaoConfig config) {
        super(config);
    }
    
    public SightsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SIGHTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"RESORT_ID\" TEXT," + // 2: resortId
                "\"RESORT_NAME\" TEXT," + // 3: resortName
                "\"RESORT_ADDRESS\" TEXT," + // 4: resortAddress
                "\"RESORT_GRADE\" TEXT," + // 5: resortGrade
                "\"RESORT_PRICE\" INTEGER," + // 6: resortPrice
                "\"RESORT_TIME\" TEXT," + // 7: resortTime
                "\"RESORT_CONTENT\" TEXT," + // 8: resortContent
                "\"LONGITUDE\" REAL," + // 9: longitude
                "\"LATITUDE\" REAL);"); // 10: latitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SIGHTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Sights entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String resortId = entity.getResortId();
        if (resortId != null) {
            stmt.bindString(3, resortId);
        }
 
        String resortName = entity.getResortName();
        if (resortName != null) {
            stmt.bindString(4, resortName);
        }
 
        String resortAddress = entity.getResortAddress();
        if (resortAddress != null) {
            stmt.bindString(5, resortAddress);
        }
 
        String resortGrade = entity.getResortGrade();
        if (resortGrade != null) {
            stmt.bindString(6, resortGrade);
        }
 
        Integer resortPrice = entity.getResortPrice();
        if (resortPrice != null) {
            stmt.bindLong(7, resortPrice);
        }
 
        String resortTime = entity.getResortTime();
        if (resortTime != null) {
            stmt.bindString(8, resortTime);
        }
 
        String resortContent = entity.getResortContent();
        if (resortContent != null) {
            stmt.bindString(9, resortContent);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(10, longitude);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(11, latitude);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Sights entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String resortId = entity.getResortId();
        if (resortId != null) {
            stmt.bindString(3, resortId);
        }
 
        String resortName = entity.getResortName();
        if (resortName != null) {
            stmt.bindString(4, resortName);
        }
 
        String resortAddress = entity.getResortAddress();
        if (resortAddress != null) {
            stmt.bindString(5, resortAddress);
        }
 
        String resortGrade = entity.getResortGrade();
        if (resortGrade != null) {
            stmt.bindString(6, resortGrade);
        }
 
        Integer resortPrice = entity.getResortPrice();
        if (resortPrice != null) {
            stmt.bindLong(7, resortPrice);
        }
 
        String resortTime = entity.getResortTime();
        if (resortTime != null) {
            stmt.bindString(8, resortTime);
        }
 
        String resortContent = entity.getResortContent();
        if (resortContent != null) {
            stmt.bindString(9, resortContent);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(10, longitude);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(11, latitude);
        }
    }

    @Override
    protected final void attachEntity(Sights entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Sights readEntity(Cursor cursor, int offset) {
        Sights entity = new Sights( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // resortId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // resortName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // resortAddress
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // resortGrade
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // resortPrice
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // resortTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // resortContent
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // longitude
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10) // latitude
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Sights entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setResortId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setResortName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setResortAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setResortGrade(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setResortPrice(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setResortTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setResortContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLongitude(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setLatitude(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Sights entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Sights entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Sights entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "sights" to-many relationship of User. */
    public List<Sights> _queryUser_Sights(Long userId) {
        synchronized (this) {
            if (user_SightsQuery == null) {
                QueryBuilder<Sights> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_SightsQuery = queryBuilder.build();
            }
        }
        Query<Sights> query = user_SightsQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
