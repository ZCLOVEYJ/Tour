package com.max.tour.bean.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.max.tour.bean.Rate;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RATE".
*/
public class RateDao extends AbstractDao<Rate, Long> {

    public static final String TABLENAME = "RATE";

    /**
     * Properties of entity Rate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property SightId = new Property(2, Long.class, "sightId", false, "SIGHT_ID");
        public final static Property Score = new Property(3, Float.class, "score", false, "SCORE");
        public final static Property Ratingtime = new Property(4, java.util.Date.class, "ratingtime", false, "RATINGTIME");
        public final static Property Others = new Property(5, String.class, "others", false, "OTHERS");
    }

    private Query<Rate> sights_RatesQuery;
    private Query<Rate> user_RatesQuery;

    public RateDao(DaoConfig config) {
        super(config);
    }
    
    public RateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RATE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"SIGHT_ID\" INTEGER," + // 2: sightId
                "\"SCORE\" REAL," + // 3: score
                "\"RATINGTIME\" INTEGER," + // 4: ratingtime
                "\"OTHERS\" TEXT);"); // 5: others
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RATE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Rate entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long sightId = entity.getSightId();
        if (sightId != null) {
            stmt.bindLong(3, sightId);
        }
 
        Float score = entity.getScore();
        if (score != null) {
            stmt.bindDouble(4, score);
        }
 
        java.util.Date ratingtime = entity.getRatingtime();
        if (ratingtime != null) {
            stmt.bindLong(5, ratingtime.getTime());
        }
 
        String others = entity.getOthers();
        if (others != null) {
            stmt.bindString(6, others);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Rate entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long sightId = entity.getSightId();
        if (sightId != null) {
            stmt.bindLong(3, sightId);
        }
 
        Float score = entity.getScore();
        if (score != null) {
            stmt.bindDouble(4, score);
        }
 
        java.util.Date ratingtime = entity.getRatingtime();
        if (ratingtime != null) {
            stmt.bindLong(5, ratingtime.getTime());
        }
 
        String others = entity.getOthers();
        if (others != null) {
            stmt.bindString(6, others);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Rate readEntity(Cursor cursor, int offset) {
        Rate entity = new Rate( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // sightId
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // score
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // ratingtime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // others
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Rate entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSightId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setScore(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setRatingtime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setOthers(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Rate entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Rate entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Rate entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "rates" to-many relationship of Sights. */
    public List<Rate> _querySights_Rates(Long sightId) {
        synchronized (this) {
            if (sights_RatesQuery == null) {
                QueryBuilder<Rate> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SightId.eq(null));
                sights_RatesQuery = queryBuilder.build();
            }
        }
        Query<Rate> query = sights_RatesQuery.forCurrentThread();
        query.setParameter(0, sightId);
        return query.list();
    }

    /** Internal query to resolve the "rates" to-many relationship of User. */
    public List<Rate> _queryUser_Rates(Long userId) {
        synchronized (this) {
            if (user_RatesQuery == null) {
                QueryBuilder<Rate> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_RatesQuery = queryBuilder.build();
            }
        }
        Query<Rate> query = user_RatesQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
