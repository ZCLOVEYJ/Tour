package com.max.tour.bean.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.max.tour.bean.Route;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROUTE".
*/
public class RouteDao extends AbstractDao<Route, Long> {

    public static final String TABLENAME = "ROUTE";

    /**
     * Properties of entity Route.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StartLocation = new Property(1, String.class, "startLocation", false, "START_LOCATION");
        public final static Property EndLocation = new Property(2, String.class, "endLocation", false, "END_LOCATION");
        public final static Property StartLongitude = new Property(3, Double.class, "startLongitude", false, "START_LONGITUDE");
        public final static Property StartLatitude = new Property(4, Double.class, "startLatitude", false, "START_LATITUDE");
        public final static Property EndLongitude = new Property(5, Double.class, "endLongitude", false, "END_LONGITUDE");
        public final static Property EndLatitude = new Property(6, Double.class, "endLatitude", false, "END_LATITUDE");
    }


    public RouteDao(DaoConfig config) {
        super(config);
    }
    
    public RouteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROUTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"START_LOCATION\" TEXT," + // 1: startLocation
                "\"END_LOCATION\" TEXT," + // 2: endLocation
                "\"START_LONGITUDE\" REAL," + // 3: startLongitude
                "\"START_LATITUDE\" REAL," + // 4: startLatitude
                "\"END_LONGITUDE\" REAL," + // 5: endLongitude
                "\"END_LATITUDE\" REAL);"); // 6: endLatitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROUTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Route entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String startLocation = entity.getStartLocation();
        if (startLocation != null) {
            stmt.bindString(2, startLocation);
        }
 
        String endLocation = entity.getEndLocation();
        if (endLocation != null) {
            stmt.bindString(3, endLocation);
        }
 
        Double startLongitude = entity.getStartLongitude();
        if (startLongitude != null) {
            stmt.bindDouble(4, startLongitude);
        }
 
        Double startLatitude = entity.getStartLatitude();
        if (startLatitude != null) {
            stmt.bindDouble(5, startLatitude);
        }
 
        Double endLongitude = entity.getEndLongitude();
        if (endLongitude != null) {
            stmt.bindDouble(6, endLongitude);
        }
 
        Double endLatitude = entity.getEndLatitude();
        if (endLatitude != null) {
            stmt.bindDouble(7, endLatitude);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Route entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String startLocation = entity.getStartLocation();
        if (startLocation != null) {
            stmt.bindString(2, startLocation);
        }
 
        String endLocation = entity.getEndLocation();
        if (endLocation != null) {
            stmt.bindString(3, endLocation);
        }
 
        Double startLongitude = entity.getStartLongitude();
        if (startLongitude != null) {
            stmt.bindDouble(4, startLongitude);
        }
 
        Double startLatitude = entity.getStartLatitude();
        if (startLatitude != null) {
            stmt.bindDouble(5, startLatitude);
        }
 
        Double endLongitude = entity.getEndLongitude();
        if (endLongitude != null) {
            stmt.bindDouble(6, endLongitude);
        }
 
        Double endLatitude = entity.getEndLatitude();
        if (endLatitude != null) {
            stmt.bindDouble(7, endLatitude);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Route readEntity(Cursor cursor, int offset) {
        Route entity = new Route( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // startLocation
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // endLocation
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // startLongitude
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // startLatitude
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // endLongitude
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6) // endLatitude
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Route entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStartLocation(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEndLocation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartLongitude(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setStartLatitude(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setEndLongitude(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setEndLatitude(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Route entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Route entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Route entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
