package com.max.tour.bean.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.max.tour.bean.Route;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROUTE".
*/
public class RouteDao extends AbstractDao<Route, Long> {

    public static final String TABLENAME = "ROUTE";

    /**
     * Properties of entity Route.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RouteId = new Property(1, Integer.class, "routeId", false, "ROUTE_ID");
        public final static Property RouteName = new Property(2, String.class, "routeName", false, "ROUTE_NAME");
        public final static Property RouteLength = new Property(3, String.class, "routeLength", false, "ROUTE_LENGTH");
        public final static Property Start = new Property(4, String.class, "Start", false, "START");
        public final static Property RouteDay = new Property(5, Integer.class, "routeDay", false, "ROUTE_DAY");
        public final static Property RoutePrice = new Property(6, Integer.class, "routePrice", false, "ROUTE_PRICE");
        public final static Property RouteDetails = new Property(7, String.class, "routeDetails", false, "ROUTE_DETAILS");
        public final static Property RouteAddtime = new Property(8, java.util.Date.class, "routeAddtime", false, "ROUTE_ADDTIME");
        public final static Property Others = new Property(9, String.class, "others", false, "OTHERS");
    }


    public RouteDao(DaoConfig config) {
        super(config);
    }
    
    public RouteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROUTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ROUTE_ID\" INTEGER," + // 1: routeId
                "\"ROUTE_NAME\" TEXT," + // 2: routeName
                "\"ROUTE_LENGTH\" TEXT," + // 3: routeLength
                "\"START\" TEXT," + // 4: Start
                "\"ROUTE_DAY\" INTEGER," + // 5: routeDay
                "\"ROUTE_PRICE\" INTEGER," + // 6: routePrice
                "\"ROUTE_DETAILS\" TEXT," + // 7: routeDetails
                "\"ROUTE_ADDTIME\" INTEGER," + // 8: routeAddtime
                "\"OTHERS\" TEXT);"); // 9: others
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROUTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Route entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer routeId = entity.getRouteId();
        if (routeId != null) {
            stmt.bindLong(2, routeId);
        }
 
        String routeName = entity.getRouteName();
        if (routeName != null) {
            stmt.bindString(3, routeName);
        }
 
        String routeLength = entity.getRouteLength();
        if (routeLength != null) {
            stmt.bindString(4, routeLength);
        }
 
        String Start = entity.getStart();
        if (Start != null) {
            stmt.bindString(5, Start);
        }
 
        Integer routeDay = entity.getRouteDay();
        if (routeDay != null) {
            stmt.bindLong(6, routeDay);
        }
 
        Integer routePrice = entity.getRoutePrice();
        if (routePrice != null) {
            stmt.bindLong(7, routePrice);
        }
 
        String routeDetails = entity.getRouteDetails();
        if (routeDetails != null) {
            stmt.bindString(8, routeDetails);
        }
 
        java.util.Date routeAddtime = entity.getRouteAddtime();
        if (routeAddtime != null) {
            stmt.bindLong(9, routeAddtime.getTime());
        }
 
        String others = entity.getOthers();
        if (others != null) {
            stmt.bindString(10, others);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Route entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer routeId = entity.getRouteId();
        if (routeId != null) {
            stmt.bindLong(2, routeId);
        }
 
        String routeName = entity.getRouteName();
        if (routeName != null) {
            stmt.bindString(3, routeName);
        }
 
        String routeLength = entity.getRouteLength();
        if (routeLength != null) {
            stmt.bindString(4, routeLength);
        }
 
        String Start = entity.getStart();
        if (Start != null) {
            stmt.bindString(5, Start);
        }
 
        Integer routeDay = entity.getRouteDay();
        if (routeDay != null) {
            stmt.bindLong(6, routeDay);
        }
 
        Integer routePrice = entity.getRoutePrice();
        if (routePrice != null) {
            stmt.bindLong(7, routePrice);
        }
 
        String routeDetails = entity.getRouteDetails();
        if (routeDetails != null) {
            stmt.bindString(8, routeDetails);
        }
 
        java.util.Date routeAddtime = entity.getRouteAddtime();
        if (routeAddtime != null) {
            stmt.bindLong(9, routeAddtime.getTime());
        }
 
        String others = entity.getOthers();
        if (others != null) {
            stmt.bindString(10, others);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Route readEntity(Cursor cursor, int offset) {
        Route entity = new Route( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // routeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // routeName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // routeLength
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Start
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // routeDay
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // routePrice
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // routeDetails
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // routeAddtime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // others
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Route entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRouteId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setRouteName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRouteLength(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStart(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRouteDay(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setRoutePrice(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setRouteDetails(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRouteAddtime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setOthers(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Route entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Route entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Route entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
