package com.max.tour.bean.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.max.tour.bean.Comment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMENT".
*/
public class CommentDao extends AbstractDao<Comment, Long> {

    public static final String TABLENAME = "COMMENT";

    /**
     * Properties of entity Comment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property SightId = new Property(2, Long.class, "sightId", false, "SIGHT_ID");
        public final static Property UserIcon = new Property(3, String.class, "userIcon", false, "USER_ICON");
        public final static Property Addtime = new Property(4, java.util.Date.class, "addtime", false, "ADDTIME");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property Reply = new Property(6, String.class, "reply", false, "REPLY");
    }

    private Query<Comment> sights_CommentsQuery;
    private Query<Comment> user_CommentsQuery;

    public CommentDao(DaoConfig config) {
        super(config);
    }
    
    public CommentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"SIGHT_ID\" INTEGER," + // 2: sightId
                "\"USER_ICON\" TEXT," + // 3: userIcon
                "\"ADDTIME\" INTEGER," + // 4: addtime
                "\"CONTENT\" TEXT," + // 5: content
                "\"REPLY\" TEXT);"); // 6: reply
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Comment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long sightId = entity.getSightId();
        if (sightId != null) {
            stmt.bindLong(3, sightId);
        }
 
        String userIcon = entity.getUserIcon();
        if (userIcon != null) {
            stmt.bindString(4, userIcon);
        }
 
        java.util.Date addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindLong(5, addtime.getTime());
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
 
        String reply = entity.getReply();
        if (reply != null) {
            stmt.bindString(7, reply);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Comment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long sightId = entity.getSightId();
        if (sightId != null) {
            stmt.bindLong(3, sightId);
        }
 
        String userIcon = entity.getUserIcon();
        if (userIcon != null) {
            stmt.bindString(4, userIcon);
        }
 
        java.util.Date addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindLong(5, addtime.getTime());
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
 
        String reply = entity.getReply();
        if (reply != null) {
            stmt.bindString(7, reply);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Comment readEntity(Cursor cursor, int offset) {
        Comment entity = new Comment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // sightId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userIcon
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // addtime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // reply
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Comment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSightId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setUserIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddtime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReply(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Comment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Comment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Comment entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "comments" to-many relationship of Sights. */
    public List<Comment> _querySights_Comments(Long sightId) {
        synchronized (this) {
            if (sights_CommentsQuery == null) {
                QueryBuilder<Comment> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SightId.eq(null));
                sights_CommentsQuery = queryBuilder.build();
            }
        }
        Query<Comment> query = sights_CommentsQuery.forCurrentThread();
        query.setParameter(0, sightId);
        return query.list();
    }

    /** Internal query to resolve the "comments" to-many relationship of User. */
    public List<Comment> _queryUser_Comments(Long userId) {
        synchronized (this) {
            if (user_CommentsQuery == null) {
                QueryBuilder<Comment> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_CommentsQuery = queryBuilder.build();
            }
        }
        Query<Comment> query = user_CommentsQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
